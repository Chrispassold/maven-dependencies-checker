---
alwaysApply: true
---

# üìù Padr√µes de C√≥digo - Maven Dependencies Checker

## üéØ Princ√≠pios Gerais

### Responsabilidade √önica
- Cada arquivo deve ter uma responsabilidade espec√≠fica
- Componentes devem ser focados em uma funcionalidade
- Utilit√°rios devem ser reutiliz√°veis e independentes

### Legibilidade
- C√≥digo deve ser autoexplicativo
- Use nomes descritivos para vari√°veis e fun√ß√µes
- Documente fun√ß√µes complexas com JSDoc

### Consist√™ncia
- Siga os padr√µes estabelecidos no projeto
- Use as conven√ß√µes de nomenclatura definidas
- Mantenha estrutura consistente entre arquivos

## üìù Conven√ß√µes de Nomenclatura

### Arquivos
- **Componentes**: `camelCase.js` (ex: `search.js`, `comparator.js`)
- **Utilit√°rios**: `kebab-case.js` (ex: `notification.js`, `version-utils.js`)
- **Templates**: `component-template.js`, `utility-template.js`

### Vari√°veis e Fun√ß√µes
- **Vari√°veis**: `camelCase` (ex: `mavenUrl`, `loading`, `jsonOutput`)
- **Fun√ß√µes**: `camelCase` (ex: `fetchDependencies()`, `clearResults()`)
- **Constantes**: `UPPER_SNAKE_CASE` (ex: `DEFAULT_CONFIG`, `MAX_RETRIES`)
- **Eventos**: `kebab-case` (ex: `data-processed`, `comparison-completed`)

### Componentes Alpine.js
- **Nome**: `camelCase + Component` (ex: `searchComponent`, `comparatorComponent`)
- **Fun√ß√£o**: `window.componentName = function()`

### Utilit√°rios
- **Nome**: `PascalCase + Utils` (ex: `NotificationUtils`, `VersionUtils`)
- **Objeto**: `window.UtilityName = {}`

## üèóÔ∏è Estrutura de Arquivos

### Componente Alpine.js
```javascript
/**
 * [Nome do Componente] Component
 * @description [Descri√ß√£o da responsabilidade]
 * @author [Seu Nome]
 * @version 1.0.0
 */

window.componentName = function() {
    return {
        // ========================================
        // ESTADO (Dados reativos)
        // ========================================
        data: '',
        loading: false,
        results: null,

        // ========================================
        // COMPUTED PROPERTIES
        // ========================================
        get computedValue() {
            return this.data ? this.data.toUpperCase() : '';
        },

        // ========================================
        // M√âTODOS
        // ========================================
        
        /**
         * Inicializa√ß√£o do componente
         */
        init() {
            console.log('Component initialized');
        },

        /**
         * Processa dados
         * @param {string} input - Dados de entrada
         * @returns {boolean} - Sucesso da opera√ß√£o
         */
        processData(input) {
            // Implementa√ß√£o
            return true;
        }
    };
};
```

### Utilit√°rio
```javascript
/**
 * [Nome do Utilit√°rio] Utility
 * @description [Descri√ß√£o da responsabilidade]
 * @author [Seu Nome]
 * @version 1.0.0
 */

window.UtilityName = {
    // ========================================
    // CONSTANTES
    // ========================================
    DEFAULT_CONFIG: {
        timeout: 5000,
        retries: 3
    },

    // ========================================
    // M√âTODOS PRINCIPAIS
    // ========================================
    
    /**
     * Fun√ß√£o principal
     * @param {string} input - Dados de entrada
     * @returns {Object} - Resultado processado
     */
    processData(input) {
        // Implementa√ß√£o
        return result;
    }
};
```

## üìö Documenta√ß√£o JSDoc

### Fun√ß√µes
```javascript
/**
 * Descri√ß√£o da fun√ß√£o
 * @param {string} param1 - Descri√ß√£o do primeiro par√¢metro
 * @param {number} param2 - Descri√ß√£o do segundo par√¢metro
 * @returns {boolean} - Descri√ß√£o do retorno
 * @example
 * const result = functionName('test', 123);
 */
function functionName(param1, param2) {
    // Implementa√ß√£o
}
```

### Componentes
```javascript
/**
 * Componente de exemplo
 * @description Respons√°vel por processar dados
 * @example
 * <div x-data="exampleComponent()">
 *   <input x-model="data">
 * </div>
 */
window.exampleComponent = function() {
    return {
        // Implementa√ß√£o
    };
};
```

### Utilit√°rios
```javascript
/**
 * Utilit√°rio de exemplo
 * @description Fornece fun√ß√µes de processamento de dados
 * @example
 * const result = ExampleUtils.processData('input');
 */
window.ExampleUtils = {
    // Implementa√ß√£o
};
```

## üîÑ Comunica√ß√£o Entre Componentes

### Eventos Customizados
```javascript
// Emitir evento
this.$dispatch('event-name', { 
    data: 'value',
    timestamp: new Date().toISOString()
});

// Escutar evento
handleEventName(event) {
    const { data, timestamp } = event.detail;
    // Processar dados
}
```

### Utilit√°rios Compartilhados
```javascript
// Sempre use utilit√°rios existentes
NotificationUtils.success('Opera√ß√£o realizada com sucesso!');
NotificationUtils.error('Erro na opera√ß√£o');
NotificationUtils.info('Informa√ß√£o importante');

VersionUtils.compareVersions('1.2.3', '1.2.4');
VersionUtils.getVersionChangeType('1.2.3', '1.2.4');

StorageUtils.addRecentSearch(url, displayName);
StorageUtils.getRecentSearches();
```

## üêõ Tratamento de Erros

### Try-Catch em Fun√ß√µes Async
```javascript
async functionName() {
    try {
        // Opera√ß√£o que pode falhar
        const result = await someAsyncOperation();
        
        // Notifica√ß√£o de sucesso
        NotificationUtils.success('Opera√ß√£o realizada!');
        
        return result;
    } catch (error) {
        console.error('Erro na opera√ß√£o:', error);
        NotificationUtils.error('Erro na opera√ß√£o');
        
        return null;
    }
}
```

### Valida√ß√£o de Entrada
```javascript
function processData(input) {
    // Valida√ß√£o
    if (!input || input.trim().length === 0) {
        NotificationUtils.error('Dados inv√°lidos');
        return false;
    }

    // Processamento
    // ...
}
```

## üé® Formata√ß√£o

### Indenta√ß√£o
- Use 4 espa√ßos para indenta√ß√£o
- Mantenha consist√™ncia em todo o arquivo

### Espa√ßamento
```javascript
// ‚úÖ Bom
function example(param1, param2) {
    const result = param1 + param2;
    return result;
}

// ‚ùå Ruim
function example(param1,param2){
    const result=param1+param2;
    return result;
}
```

### Quebra de Linha
```javascript
// ‚úÖ Bom - Linhas longas quebradas
const longVariableName = someFunction(
    parameter1,
    parameter2,
    parameter3
);

// ‚ùå Ruim - Linha muito longa
const longVariableName = someFunction(parameter1, parameter2, parameter3);
```

## üîß Boas Pr√°ticas

### ‚úÖ Fa√ßa
- Use nomes descritivos para vari√°veis e fun√ß√µes
- Documente fun√ß√µes complexas com JSDoc
- Use utilit√°rios existentes em vez de reimplementar
- Mantenha fun√ß√µes pequenas e focadas
- Teste componentes isoladamente

### ‚ùå N√£o Fa√ßa
- N√£o use nomes gen√©ricos como `data`, `result`, `temp`
- N√£o duplique c√≥digo - extraia para utilit√°rios
- N√£o crie fun√ß√µes muito longas (> 20 linhas)
- N√£o misture responsabilidades em um componente
- N√£o ignore tratamento de erros

## üöÄ Performance

### Otimiza√ß√µes
- Use `get` para computed properties
- Evite opera√ß√µes pesadas em loops
- Use debounce para eventos frequentes
- Limpe event listeners quando necess√°rio

### Exemplo de Debounce
```javascript
// Utilit√°rio de debounce
const debouncedFunction = this.debounce(() => {
    // Opera√ß√£o que ser√° executada ap√≥s delay
}, 300);

// Uso
input.addEventListener('input', debouncedFunction);
```

## üéØ Checklist de Qualidade

### ‚úÖ Antes de Commitar
- [ ] C√≥digo segue padr√µes de nomenclatura
- [ ] Fun√ß√µes t√™m documenta√ß√£o JSDoc
- [ ] Tratamento de erros implementado
- [ ] N√£o h√° c√≥digo duplicado
- [ ] Componentes t√™m responsabilidade √∫nica
- [ ] Testado localmente

### ‚úÖ Para Novos Recursos
- [ ] Criado componente espec√≠fico
- [ ] Adicionado script no index.html
- [ ] Implementado comunica√ß√£o via eventos
- [ ] Documentado no README
- [ ] Segue padr√µes estabelecidos

---

**Mantenha o c√≥digo limpo, organizado e bem documentado! üìù** # üìù Padr√µes de C√≥digo - Maven Dependencies Checker

## üéØ Princ√≠pios Gerais

### Responsabilidade √önica
- Cada arquivo deve ter uma responsabilidade espec√≠fica
- Componentes devem ser focados em uma funcionalidade
- Utilit√°rios devem ser reutiliz√°veis e independentes

### Legibilidade
- C√≥digo deve ser autoexplicativo
- Use nomes descritivos para vari√°veis e fun√ß√µes
- Documente fun√ß√µes complexas com JSDoc

### Consist√™ncia
- Siga os padr√µes estabelecidos no projeto
- Use as conven√ß√µes de nomenclatura definidas
- Mantenha estrutura consistente entre arquivos

## üìù Conven√ß√µes de Nomenclatura

### Arquivos
- **Componentes**: `camelCase.js` (ex: `search.js`, `comparator.js`)
- **Utilit√°rios**: `kebab-case.js` (ex: `notification.js`, `version-utils.js`)
- **Templates**: `component-template.js`, `utility-template.js`

### Vari√°veis e Fun√ß√µes
- **Vari√°veis**: `camelCase` (ex: `mavenUrl`, `loading`, `jsonOutput`)
- **Fun√ß√µes**: `camelCase` (ex: `fetchDependencies()`, `clearResults()`)
- **Constantes**: `UPPER_SNAKE_CASE` (ex: `DEFAULT_CONFIG`, `MAX_RETRIES`)
- **Eventos**: `kebab-case` (ex: `data-processed`, `comparison-completed`)

### Componentes Alpine.js
- **Nome**: `camelCase + Component` (ex: `searchComponent`, `comparatorComponent`)
- **Fun√ß√£o**: `window.componentName = function()`

### Utilit√°rios
- **Nome**: `PascalCase + Utils` (ex: `NotificationUtils`, `VersionUtils`)
- **Objeto**: `window.UtilityName = {}`

## üèóÔ∏è Estrutura de Arquivos

### Componente Alpine.js
```javascript
/**
 * [Nome do Componente] Component
 * @description [Descri√ß√£o da responsabilidade]
 * @author [Seu Nome]
 * @version 1.0.0
 */

window.componentName = function() {
    return {
        // ========================================
        // ESTADO (Dados reativos)
        // ========================================
        data: '',
        loading: false,
        results: null,

        // ========================================
        // COMPUTED PROPERTIES
        // ========================================
        get computedValue() {
            return this.data ? this.data.toUpperCase() : '';
        },

        // ========================================
        // M√âTODOS
        // ========================================
        
        /**
         * Inicializa√ß√£o do componente
         */
        init() {
            console.log('Component initialized');
        },

        /**
         * Processa dados
         * @param {string} input - Dados de entrada
         * @returns {boolean} - Sucesso da opera√ß√£o
         */
        processData(input) {
            // Implementa√ß√£o
            return true;
        }
    };
};
```

### Utilit√°rio
```javascript
/**
 * [Nome do Utilit√°rio] Utility
 * @description [Descri√ß√£o da responsabilidade]
 * @author [Seu Nome]
 * @version 1.0.0
 */

window.UtilityName = {
    // ========================================
    // CONSTANTES
    // ========================================
    DEFAULT_CONFIG: {
        timeout: 5000,
        retries: 3
    },

    // ========================================
    // M√âTODOS PRINCIPAIS
    // ========================================
    
    /**
     * Fun√ß√£o principal
     * @param {string} input - Dados de entrada
     * @returns {Object} - Resultado processado
     */
    processData(input) {
        // Implementa√ß√£o
        return result;
    }
};
```

## üìö Documenta√ß√£o JSDoc

### Fun√ß√µes
```javascript
/**
 * Descri√ß√£o da fun√ß√£o
 * @param {string} param1 - Descri√ß√£o do primeiro par√¢metro
 * @param {number} param2 - Descri√ß√£o do segundo par√¢metro
 * @returns {boolean} - Descri√ß√£o do retorno
 * @example
 * const result = functionName('test', 123);
 */
function functionName(param1, param2) {
    // Implementa√ß√£o
}
```

### Componentes
```javascript
/**
 * Componente de exemplo
 * @description Respons√°vel por processar dados
 * @example
 * <div x-data="exampleComponent()">
 *   <input x-model="data">
 * </div>
 */
window.exampleComponent = function() {
    return {
        // Implementa√ß√£o
    };
};
```

### Utilit√°rios
```javascript
/**
 * Utilit√°rio de exemplo
 * @description Fornece fun√ß√µes de processamento de dados
 * @example
 * const result = ExampleUtils.processData('input');
 */
window.ExampleUtils = {
    // Implementa√ß√£o
};
```

## üîÑ Comunica√ß√£o Entre Componentes

### Eventos Customizados
```javascript
// Emitir evento
this.$dispatch('event-name', { 
    data: 'value',
    timestamp: new Date().toISOString()
});

// Escutar evento
handleEventName(event) {
    const { data, timestamp } = event.detail;
    // Processar dados
}
```

### Utilit√°rios Compartilhados
```javascript
// Sempre use utilit√°rios existentes
NotificationUtils.success('Opera√ß√£o realizada com sucesso!');
NotificationUtils.error('Erro na opera√ß√£o');
NotificationUtils.info('Informa√ß√£o importante');

VersionUtils.compareVersions('1.2.3', '1.2.4');
VersionUtils.getVersionChangeType('1.2.3', '1.2.4');

StorageUtils.addRecentSearch(url, displayName);
StorageUtils.getRecentSearches();
```

## üêõ Tratamento de Erros

### Try-Catch em Fun√ß√µes Async
```javascript
async functionName() {
    try {
        // Opera√ß√£o que pode falhar
        const result = await someAsyncOperation();
        
        // Notifica√ß√£o de sucesso
        NotificationUtils.success('Opera√ß√£o realizada!');
        
        return result;
    } catch (error) {
        console.error('Erro na opera√ß√£o:', error);
        NotificationUtils.error('Erro na opera√ß√£o');
        
        return null;
    }
}
```

### Valida√ß√£o de Entrada
```javascript
function processData(input) {
    // Valida√ß√£o
    if (!input || input.trim().length === 0) {
        NotificationUtils.error('Dados inv√°lidos');
        return false;
    }

    // Processamento
    // ...
}
```

## üé® Formata√ß√£o

### Indenta√ß√£o
- Use 4 espa√ßos para indenta√ß√£o
- Mantenha consist√™ncia em todo o arquivo

### Espa√ßamento
```javascript
// ‚úÖ Bom
function example(param1, param2) {
    const result = param1 + param2;
    return result;
}

// ‚ùå Ruim
function example(param1,param2){
    const result=param1+param2;
    return result;
}
```

### Quebra de Linha
```javascript
// ‚úÖ Bom - Linhas longas quebradas
const longVariableName = someFunction(
    parameter1,
    parameter2,
    parameter3
);

// ‚ùå Ruim - Linha muito longa
const longVariableName = someFunction(parameter1, parameter2, parameter3);
```

## üîß Boas Pr√°ticas

### ‚úÖ Fa√ßa
- Use nomes descritivos para vari√°veis e fun√ß√µes
- Documente fun√ß√µes complexas com JSDoc
- Use utilit√°rios existentes em vez de reimplementar
- Mantenha fun√ß√µes pequenas e focadas
- Teste componentes isoladamente

### ‚ùå N√£o Fa√ßa
- N√£o use nomes gen√©ricos como `data`, `result`, `temp`
- N√£o duplique c√≥digo - extraia para utilit√°rios
- N√£o crie fun√ß√µes muito longas (> 20 linhas)
- N√£o misture responsabilidades em um componente
- N√£o ignore tratamento de erros

## üöÄ Performance

### Otimiza√ß√µes
- Use `get` para computed properties
- Evite opera√ß√µes pesadas em loops
- Use debounce para eventos frequentes
- Limpe event listeners quando necess√°rio

### Exemplo de Debounce
```javascript
// Utilit√°rio de debounce
const debouncedFunction = this.debounce(() => {
    // Opera√ß√£o que ser√° executada ap√≥s delay
}, 300);

// Uso
input.addEventListener('input', debouncedFunction);
```

## üéØ Checklist de Qualidade

### ‚úÖ Antes de Commitar
- [ ] C√≥digo segue padr√µes de nomenclatura
- [ ] Fun√ß√µes t√™m documenta√ß√£o JSDoc
- [ ] Tratamento de erros implementado
- [ ] N√£o h√° c√≥digo duplicado
- [ ] Componentes t√™m responsabilidade √∫nica
- [ ] Testado localmente

### ‚úÖ Para Novos Recursos
- [ ] Criado componente espec√≠fico
- [ ] Adicionado script no index.html
- [ ] Implementado comunica√ß√£o via eventos
- [ ] Documentado no README
- [ ] Segue padr√µes estabelecidos

---

**Mantenha o c√≥digo limpo, organizado e bem documentado! üìù** 